 #-*- coding: utf-8 -*-
"""Build ChatBot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nVagqyiBTVUh-4vaIn84SCJw-l0tGp8z
"""

import google.generativeai as genai
import os
import time

os.environ["API_KEY"] = "AIzaSyAMOnki4YtNzkcsigs2R-lvZsOnsCN1lSE"  # Your API key
genai.configure(api_key=os.environ["API_KEY"])

model = genai.GenerativeModel('gemini-1.5-pro-latest')

user_name = None  # Store user's name

def chat_with_bot(prompt):
    """
    Chats with a Google Generative AI model.
    Includes features like personalization, typing indicator,
    error handling, and raising exceptions.

    Args:
        prompt: The user's input prompt.

    Returns:
        The bot's response.

    Raises:
        genai.errors.APIError: If there's an issue with the API.
        genai.errors.AuthenticationError: If authentication fails.
        genai.errors.ResourceExhaustedError: If resources are exhausted.
        Exception: For any other unexpected errors.
    """
    global user_name
    try:
        # Get user's name if not already known
        if user_name is None:
            user_name = input("What's your name? ")
            return f"Hello {user_name}, nice to meet you! How can I help you today?"

        # Handle basic questions with predefined responses
        if prompt.lower() in ["hi", "hello", "hey"]:
            return f"Hello {user_name}!"
        elif prompt.lower() == "how are you?":
            return f"I'm doing well, thank you, {user_name}!"
        elif prompt.lower() == "what's your name?":
            return "I'm a Google Generative AI model."

        # Simulate typing indicator
        print("Bot is typing...", end="", flush=True)
        time.sleep(1)  # Adjust delay as needed
        print("\r", end="", flush=True)  # Clear typing indicator

        # Generate a response from the model
        response = model.generate_content(prompt)
        return response.text

    except genai.errors.APIError as e:
        raise  # Re-raise the APIError
    except genai.errors.AuthenticationError as e:
        raise  # Re-raise the AuthenticationError
    except genai.errors.ResourceExhaustedError as e:
        raise  # Re-raise the ResourceExhaustedError
    except Exception as e:
        raise  # Re-raise any other exception

# Example usage:
print("Welcome to the chatbot! Type 'exit' to quit.")
while True:
    user_input = input("You: ")
    if user_input.lower() == "exit":
        print("Exiting chat. Goodbye!")
        break
    try:
        response = chat_with_bot(user_input)
        print("Bot:", response)
    except Exception as e:
        print(f"An error occurred: {type(e).__name__}: {e}")

